// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users & Authentication
model User {
  id          String   @id @default(cuid())
  phone       String   @unique
  passwordHash String  @map("password_hash")
  roleId      String   @map("role_id")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  role                     Role                       @relation(fields: [roleId], references: [id])
  sessions                 Session[]
  createdShops             Shop[]                     @relation("CreatedByUser")
  approvedShops            Shop[]                     @relation("ApprovedByUser")
  commercialAgent          CommercialAgent?

  @@map("users")
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  permissions Json

  // Relations
  users User[]

  @@map("roles")
}

model Session {
  id        String   @id @default(cuid())
  userId    String?  @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Shops & Agents
model Shop {
  id               String      @id @default(cuid())
  nameAr           String      @map("name_ar")
  nameFr           String?     @map("name_fr")
  ownerName        String      @map("owner_name")
  phone            String      @unique
  passwordHash     String      @map("password_hash")
  city             String
  address          String
  latitude         Float?
  longitude        Float?
  profileImage     String?     @map("profile_image")
  status           ShopStatus  @default(PENDING)
  createdByUserId  String?     @map("created_by_user_id")
  approvedByUserId String?     @map("approved_by_user_id")
  createdAt        DateTime    @default(now()) @map("created_at")
  updatedAt        DateTime    @updatedAt @map("updated_at")

  // Relations
  createdBy                User?                      @relation("CreatedByUser", fields: [createdByUserId], references: [id])
  approvedBy               User?                      @relation("ApprovedByUser", fields: [approvedByUserId], references: [id])
  orders                   Order[]
  shopImages               ShopImage[]
  notifications            Notification[]

  @@map("shops")
}

model ShopImage {
  id       String @id @default(cuid())
  shopId   String @map("shop_id")
  imageUrl String @map("image_url")
  sortOrder Int   @default(0) @map("sort_order")

  // Relations
  shop Shop @relation(fields: [shopId], references: [id], onDelete: Cascade)

  @@map("shop_images")
}

model CommercialAgent {
  id             String @id @default(cuid())
  userId         String @unique @map("user_id")
  territory      String
  commissionRate Float  @map("commission_rate")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("commercial_agents")
}

// Products & Inventory
model Category {
  id       String @id @default(cuid())
  nameAr   String @map("name_ar")
  nameFr   String @map("name_fr")
  imageUrl String @map("image_url")
  parentId String? @map("parent_id")
  sortOrder Int   @default(0) @map("sort_order")
  isActive Boolean @default(true) @map("is_active")

  // Relations
  parent             Category?           @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children           Category[]          @relation("CategoryHierarchy")
  products           Product[]
  promotionCategories PromotionCategory[]

  @@map("categories")
}

model Brand {
  id       String  @id @default(cuid())
  name     String  @unique
  logoUrl  String  @map("logo_url")
  isActive Boolean @default(true) @map("is_active")

  // Relations
  products Product[]

  @@map("brands")
}

model Product {
  id            String  @id @default(cuid())
  sku           String  @unique
  nameAr        String  @map("name_ar")
  nameFr        String  @map("name_fr")
  descriptionAr String? @map("description_ar")
  descriptionFr String? @map("description_fr")
  categoryId    String  @map("category_id")
  brandId       String  @map("brand_id")
  basePrice     Float   @map("base_price")
  comparePrice  Float?  @default(0) @map("compare_price")
  currentStock  Int     @default(0) @map("current_stock")
  isFeatured    Boolean @default(false) @map("is_featured")
  isActive      Boolean @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Relations
  category           Category            @relation(fields: [categoryId], references: [id])
  brand              Brand               @relation(fields: [brandId], references: [id])
  images             ProductImage[]
  priceTiers         PriceTier[]
  orderItems         OrderItem[]
  promotionProducts  PromotionProduct[]

  @@map("products")
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String  @map("product_id")
  imageUrl  String  @map("image_url")
  sortOrder Int     @default(0) @map("sort_order")
  isPrimary Boolean @default(false) @map("is_primary")

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model PriceTier {
  id          String @id @default(cuid())
  productId   String @map("product_id")
  minQuantity Int    @map("min_quantity")
  pricePerUnit Float @map("price_per_unit")

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("price_tiers")
}

// Orders & Transactions
model Order {
  id             String      @id @default(cuid())
  shopId         String      @map("shop_id")
  orderNumber    String      @unique @map("order_number")
  status         OrderStatus @default(NEW)
  subtotal       Float
  discountAmount Float       @default(0) @map("discount_amount")
  taxAmount      Float       @default(0) @map("tax_amount")
  totalAmount    Float       @map("total_amount")
  notes          String?
  createdAt      DateTime    @default(now()) @map("created_at")
  processedAt    DateTime?   @map("processed_at")
  deliveredAt    DateTime?   @map("delivered_at")

  // Relations
  shop     Shop        @relation(fields: [shopId], references: [id])
  items    OrderItem[]
  invoices Invoice[]

  @@map("orders")
}

model OrderItem {
  id         String @id @default(cuid())
  orderId    String @map("order_id")
  productId  String @map("product_id")
  quantity   Int
  unitPrice  Float  @map("unit_price")
  totalPrice Float  @map("total_price")

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Invoice {
  id            String   @id @default(cuid())
  orderId       String   @map("order_id")
  invoiceNumber String   @unique @map("invoice_number")
  pdfUrl        String   @map("pdf_url")
  createdAt     DateTime @default(now()) @map("created_at")

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("invoices")
}

// Promotions
model Promotion {
  id        String          @id @default(cuid())
  name      String
  type      PromotionType
  value     Float
  startDate DateTime        @map("start_date")
  endDate   DateTime        @map("end_date")
  isActive  Boolean         @default(true) @map("is_active")
  createdAt DateTime        @default(now()) @map("created_at")

  // Relations
  promotionProducts   PromotionProduct[]
  promotionCategories PromotionCategory[]

  @@map("promotions")
}

model PromotionProduct {
  promotionId String @map("promotion_id")
  productId   String @map("product_id")

  // Relations
  promotion Promotion @relation(fields: [promotionId], references: [id], onDelete: Cascade)
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([promotionId, productId])
  @@map("promotion_products")
}

model PromotionCategory {
  promotionId String @map("promotion_id")
  categoryId  String @map("category_id")

  // Relations
  promotion Promotion @relation(fields: [promotionId], references: [id], onDelete: Cascade)
  category  Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([promotionId, categoryId])
  @@map("promotion_categories")
}

model Slider {
  id        String  @id @default(cuid())
  imageUrl  String  @map("image_url")
  linkUrl   String? @map("link_url")
  sortOrder Int     @default(0) @map("sort_order")
  isActive  Boolean @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("sliders")
}

// Notifications
model Notification {
  id        String   @id @default(uuid())
  message   String
  imageUrl  String?
  route     String?
  title     String?
  products  Json?
  createdAt DateTime @default(now())
  isRead    Boolean  @default(false)
  shop      Shop?    @relation(fields: [shopId], references: [id])
  shopId    String?

  @@map("notifications")
}

// Enums
enum ShopStatus {
  PENDING
  APPROVED
  BLOCKED
}

enum OrderStatus {
  NEW
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PromotionType {
  PERCENTAGE
  FIXED
}